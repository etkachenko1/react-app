// *************************************************************************************************
// DO NOT EDIT. FILE GENERATED BY BB-NODE-GEN. PUT APP CODE IN `app.ts` INSTEAD.
// *************************************************************************************************

import { startApp, Application } from "./app";
import Logger, { configureLogger } from "./logger";

let app: Application;

const USAGE = "Usage:\n    index.js -l path/to/logs";

const logger = new Logger(__filename);

interface ParsedArguments {
  logPath: string | undefined;
}

function once(fn: any) {
  let called = false;
  return function(this: any, ...args: any) {
    if (called) {
      return;
    }
    called = true;
    return fn.call(this, ...args);
  };
}

function parseArguments(lineArguments: string[]): ParsedArguments {
  if (lineArguments.length !== 2 || lineArguments[0] !== "-l") {
    return {
      logPath: undefined
    };
  }

  const logPath = lineArguments[1];

  return {
    logPath
  };
}

function run() {
  // Parse arguments from command line
  const parsedArguments = parseArguments(process.argv.slice(2));
  if (!parsedArguments.logPath) {
    console.log(USAGE);
    teardown(0, "no arguments given");
    return;
  }

  // Setup logger
  const fileVerbosity = "info";
  const stdoutVerbosity = "error";
  configureLogger(
    parsedArguments.logPath,
    fileVerbosity,
    stdoutVerbosity
  );

  app = startApp();
}

async function _teardown(exitCode: number, reason: any) {
  logger.info(`Terminating, reason: `, reason);

  try {
    await app.dispose();
  } catch (e: unknown) {
    logger.error("Unable to gracefully stop the application: ", e);
    exitCode = 1;
  }

  logger.info(`The process will terminate with exit code: `, exitCode);
  process.exitCode = exitCode;

  setTimeout(() => {
    logger.warn(
      `The process didn't shut down in 10 seconds, forcing shutdown.`
    );
    process.exit(exitCode);
  }, 10000).unref();
}

const teardown = once(_teardown);

process.on("SIGINT", () => teardown(0, "SIGINT")); // catch ctrl-c
process.on("SIGTERM", () => teardown(0, "SIGTERM")); // catch kill
process.on("uncaughtException", e => teardown(1, e));
process.on("unhandledRejection", e => teardown(1, e));

try {
  run();
} catch (e) {
  logger.error(e);
  process.exitCode = 1;
}
